SQL-Sequence Query Language

SELECT first_name, last_name, email FROM customer;

#select distinct entries
SELECT DISTINCT rating FROM film; 

#return nr of distinct ratings from film table - Count uses () mandatory
SELECT  COUNT(DISTINCT rating) FROM film;

SELECT email FROM customer
WHERE first_name ='Nancy'  AND last_name = 'Thomas';

SELECT store_id, first_name,last_name  FROM customer
ORDER BY store_id,first_name 

#list first 10 customers
SELECT customer_id FROM payment
ORDER BY payment_date
LIMIT 10

SELECT title,length  from film
ORDER BY length ASC
LIMIT 5

SELECT * FROM payment
WHERE payment_date BETWEEN '2007-02-20' AND '2007-02-21';

SELECT * FROM payment
WHERE amount NOT BETWEEN 8 AND 9;

SELECT * FROM payment
WHERE amount IN (0.99, 1.99)

SELECT * FROM customer
WHERE first_name NOT IN ('Marie','Ann')

#LIKE - case sensitive, ILIKE- case insensitive
# Wildcard characters: % matches any sequence of characters, _ matches any single character 
#list all entries with first_name starting with 'J'
SELECT * FROM customer
WHERE first_name LIKE 'J%'
#list all entries with first_name containing one character followed by 'her' and any sequence
SELECT * FROM customer
Where first_name LIKE '_her%'

#(MIN/MAX/AVG/SUM)
SELECT MIN(replacement_cost) FROM film 
#ROUND- rotunjeste raspunsul la valoarea specificata dupa virgula (exe: 3 decimale)
SELECT ROUND(AVG(replacement_cost),3) FROM film 

#GROUP BY
SELECT customer_id,staff_id,SUM(amount) FROM payment
GROUP BY staff_id, customer_id
ORDER BY customer_id

SELECT staff_id, COUNT(amount) FROM payment
GROUP BY staff_id

#HAVING - filtreaza rezultatele dupa ce s-a facut gruparea 
SELECT customer_id, COUNT(payment_id) FROM payment
GROUP BY customer_id 
HAVING COUNT(payment_id) >= 40

SELECT customer_id, staff_id,SUM(amount) FROM payment
WHERE staff_id=2
GROUP BY customer_id, staff_id 
HAVING SUM(amount) >= 100
