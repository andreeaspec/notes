#run a container from an image
docker run <nginx>

# -it ->automatically logged in when it runs
docker run -it centos bash 

#run in detach (in background)
docker run -d <container_name>

# map port 8080 on the container to 38282 on the host
docker run -p 38282:8080 -d kodekloud/simple-webapp:blue

# run with a tag
docker run ubuntu:4.0

#open the container created using attach 
docker attach a043d 

# -H option - run on a host
docker -H=10.123.2.1:2375 run nginx

#--cpu option to limit the cpu usage (no more than 5% in this example)
docker run --cpus=.5 ubuntu

#--memory option to limit the memory usage
docker run --memory=100m ubuntu

#stop docker container
docker stop <container_name/container_id>

#list all running containers only
docker ps

#list all containers running or not
docker ps -a

#remove a stopped container
docker rm <container_name/container_id>>

#list docker images
docker images

#remove docker image
docker rmi <image_name>

docker pull <image_name>
docker run ubuntu sleep 5

#see a file inside a container
docker exec <container_name> cat /etc/hosts

#list info aboute images-size etc
docker history <image_name> 

# to save data create data_volume under /var/lib/docker/volumes 
docker volume create data_volume

# mount the volume to the server-> volume mounting 
docker run -v sata_volume:/var/lib/mysql mysql 

# mount an already existing folder /data/mysql -> bind mounting 
docker run -v /data/mysql:/var/lib/mysql mysql
# echivalent cu ce e mai jo (se poate face si cu optiunea --mount)
docker run --mount type=bind,source=/data/mysql,target=/var/lib/mysql mysql

# run jenkins server on docker with data stored in /home/andreea/my-jenkins-data 
sudo docker run -p 8080:8080 -p 50000:50000 -v /home/andreea/my-jenkins-data:/var/jenkins_home -u root jenkins/jenkins:lts-jdk11

# run a mysql container named mysql-db using the mysql image with database password set to db_pass123
docker run -d --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 mysql


