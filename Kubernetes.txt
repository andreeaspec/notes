#4 level top properties in pod definition.yaml - apiVersion, kind, metadata and spec
# get pods - internal IP in 10.244.0.0 range
kubectl get pods
kubectl get pods -o wide

# create new pod using apply - cand use apply or create 
kubectl apply -f pod.yaml
# create pod with nginx name
kubectl run nginx --image=nginx

kubectl describe pod <pod_name>
kubectl delete pods <pod_name> 
kubectl run redis --image=redis123
 
kubectl delete pods redis 

kubectl get replicaset
kubectl edit replicaset new-replica-set
#pentru scale se poate si asa si cu comanda scale
kubectl scale replicaset new-replica-set --replicas=5
kubectl delete rs replicaset-1
kubectl describe rs
kubectl create -f deployment
kubectl get deployments
kubectl get replicaset
kubectl get pods
# vezi toate cele 3 de sus 
kubectl get all

#Create a new pod with the name redis and the image redis123 using a pod-definition YAML file
kubectl run redis --image=redis123 --dry-run=client -o yaml > redis-definition.yaml
kubectl create -f redis-definition.yaml

#5 level top properties in REPLICATION CONTROLLER - apiVersion, kind, metadata, spec(includes metadata #of Pod creation) and replicas
kubectl create -f rc-definition.yaml
kubectl get replicationcontroller

#5 level top properties in REPLICA SET - apiVersion, kind, metadata, spec, replicas and selector
kubectl create -f replicaset-definition.yaml
kubectl get replicaset

# see the yaml definition of the replicaset
kubectl get rs new-replica-set -o yaml

#edit by opening a vim to the definition of the replica-set definition
kubectl edit replicaset new-replica-set 

#Scale - increase nr of replicas by replacing or scaling 
kubectl replace -f replicaset-definition.yml
kubectl scale --replicas=6  -f replicaset-definition.yml
kubectl scale --replicas=5 replicaset new-replica-set 

# deployment commands - apiVersion: apps/v1 kind: Deployment

kubectl create -f deployment
kubectl create deployment httpd-frontend --image=httpd:2.4-alpine --replicas=3
# CREATE&RECORD  
kubectl create -f deployment-deployment-definition.yml --record
kubectl get deployments

# rollout commands:
# Deployment Strategy - Recreate
kubectl apply -f deployment-definition.yml

# Deployment Strategy - Rolling Update -> deploymentul are alt config
kubectl set image deployment/myapp-deployment \nginx-container=nginx:1.9.1
kubectl describe deployment myapp-deployment
kubectl rollout status deployment/myapp-deployment
kubectl rollout history deployment/myapp-deployment
# Rollback 
kubectl rollout undo deployment myapp-deployment

# a service can be used to expose an application to other aplications for external access
# service commands - apiVersion: v1 kind: Service
# Services - enables connectivity between pods-map a node port to a pod port
# target port is the Pod port and NodePort (3000-32767 range) we use to access the service externally 
kubectl create -f service-definition.yaml
kubectl get svc


